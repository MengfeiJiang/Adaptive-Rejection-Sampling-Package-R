walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
walk
walk<-matrix(start,2,steps)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
wal
walk
p
p
p
p
walk<-matrix(start,2,steps)
prob<-runif(steps-1)
prob
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
walk
walk<-matrix(start,2,steps)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
walk<-matrix(start,2,steps)
start=c(0,0)
steps=10
walk<-matrix(start,2,steps)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
walk
steps=10
walk<-matrix(start,2,steps)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
walk
c(cumsum(walk[1,]),cumsum(walk[2,])
)
c(cumsum(walk[1,]),cumsum(walk[2,]))
c(cumsum(walk[1,])
)
c(c(start),cumsum(walk[1,]))
c(c(start[1]),cumsum(walk[1,]))
realWalk<-matrix(c(c(start[1],cumsum(walk[1,])),c(start[2],cumsum(walk[2,]))),2,steps,byrow = TRUE)
realWalk<-matrix(c(c(start[1],cumsum(walk[1,])),c(start[2],cumsum(walk[2,]))),2,steps+1,byrow = TRUE)
realWalk
steps=10
walk<-matrix(start,2,steps-1)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
realWalk<-matrix(c(c(start[1],cumsum(walk[1,])),c(start[2],cumsum(walk[2,]))),2,steps,byrow = TRUE)
realWalk
steps=10
walk<-matrix(start,2,steps-1)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
realWalk<-matrix(c(c(start[1],cumsum(walk[1,])),c(start[2],cumsum(walk[2,]))),2,steps,byrow = TRUE)
realWalk
rw = function(steps,returnType="full",start=c(0,0)) {
#checks
if(!is.numeric(steps)) stop("The Number of steps must be numeric")
if(!is.double(start)) stop("start must be a vector with two integers")
if(!isTRUE(length(start)==2)) stop("start must be a vector with two integers")
if(!is.character(returnType)) stop("returnType must be either \"full\" or \"final\"")
if(!isTRUE(start[2] == floor(start[2])) & !isTRUE(start[2] == floor(start[2])))
stop("start must be a vector with two integer values")
if(!isTRUE(steps == floor(steps) & steps>=1)) stop("steps must be a positive integer")
if(!isTRUE(returnType=="full" | returnType=="final")) stop("returnType must be either \"full\" or \"final\"")
steps=10
walk<-matrix(start,2,steps-1)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
realWalk<-matrix(c(c(start[1],cumsum(walk[1,])),c(start[2],cumsum(walk[2,]))),2,steps,byrow = TRUE)
value<-list(steps=steps, walk=realWalk, start=start,final=realWalk[,steps])
class(value)<-"rw"
value
}
# name the class appropriately
class(rw) <- "randomWalk"
print.rw <- function(rw) {
cat("Random Walk of ", rw$steps, " number of steps\n")
cat("Start position ", rw$start, "\n")
cat("Final position ", rw$final, "\n")
}
`[.rw` <- function (rw,i)  {
if(!is.numeric(i)) stop("i must be a positive integer")
if(!isTRUE(i == floor(i) & i>=1 & i<=rw$steps)) stop("i must be a positive integer between 1 and rw steps")
y<-rw$walk[,i]
return (y)
}
`start<-` <- function(x, ...) UseMethod("start<-")
`start<-.rw` <- function(rw,value){
old <- rw$start
rw$start <- value
rw$walk <- rw$walk + rw$start - old
rw$final <- rw$final + rw$start - old
return(rw)
}
plot.rw <- function(rw) {
walk<-rw$walk
plot(0,type="n",xlab="x",ylab="y",main="Random Walk",col=1:10,xlim=range(walk[1,]),ylim=range(walk[2,]))
segments(head(walk[1,], -1)
, head(walk[2,], -1)
, tail(walk[1,], -1)
, tail(walk[2,], -1)
, col = rainbow(ncol(walk) -1)  # a range of colors
)
text(walk[1,1:rw$steps],walk[2,1:rw$steps],(1:rw$steps), cex=0.55)
#   end<-cbind(rw$final[1],rw$final[2])
#   start<-rw$start
#
#   points(start,pch=16,col="green", cex = 3)
#   points(end,pch=16,col="red", cex = 3)
}
rww<-rw(30)
rww
rww<-rw(30)
rww
rww<-rw(30)
rw = function(steps,returnType="full",start=c(0,0)) {
#checks
if(!is.numeric(steps)) stop("The Number of steps must be numeric")
if(!is.double(start)) stop("start must be a vector with two integers")
if(!isTRUE(length(start)==2)) stop("start must be a vector with two integers")
if(!is.character(returnType)) stop("returnType must be either \"full\" or \"final\"")
if(!isTRUE(start[2] == floor(start[2])) & !isTRUE(start[2] == floor(start[2])))
stop("start must be a vector with two integer values")
if(!isTRUE(steps == floor(steps) & steps>=1)) stop("steps must be a positive integer")
if(!isTRUE(returnType=="full" | returnType=="final")) stop("returnType must be either \"full\" or \"final\"")
walk<-matrix(start,2,steps-1)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
realWalk<-matrix(c(c(start[1],cumsum(walk[1,])),c(start[2],cumsum(walk[2,]))),2,steps,byrow = TRUE)
value<-list(steps=steps, walk=realWalk, start=start,final=realWalk[,steps])
class(value)<-"rw"
value
}
# name the class appropriately
class(rw) <- "randomWalk"
print.rw <- function(rw) {
cat("Random Walk of ", rw$steps, " number of steps\n")
cat("Start position ", rw$start, "\n")
cat("Final position ", rw$final, "\n")
}
`[.rw` <- function (rw,i)  {
if(!is.numeric(i)) stop("i must be a positive integer")
if(!isTRUE(i == floor(i) & i>=1 & i<=rw$steps)) stop("i must be a positive integer between 1 and rw steps")
y<-rw$walk[,i]
return (y)
}
`start<-` <- function(x, ...) UseMethod("start<-")
`start<-.rw` <- function(rw,value){
old <- rw$start
rw$start <- value
rw$walk <- rw$walk + rw$start - old
rw$final <- rw$final + rw$start - old
return(rw)
}
plot.rw <- function(rw) {
walk<-rw$walk
plot(0,type="n",xlab="x",ylab="y",main="Random Walk",col=1:10,xlim=range(walk[1,]),ylim=range(walk[2,]))
segments(head(walk[1,], -1)
, head(walk[2,], -1)
, tail(walk[1,], -1)
, tail(walk[2,], -1)
, col = rainbow(ncol(walk) -1)  # a range of colors
)
text(walk[1,1:rw$steps],walk[2,1:rw$steps],(1:rw$steps), cex=0.55)
#   end<-cbind(rw$final[1],rw$final[2])
#   start<-rw$start
#
#   points(start,pch=16,col="green", cex = 3)
#   points(end,pch=16,col="red", cex = 3)
}
rww<-rw(30)
rww
rww<-rw(30)
rww
rww$walk
start(rww)<-c(3,3)
rww$walk
plot(rww)
plot.rw <- function(rw) {
walk<-rw$walk
plot(0,type="n",xlab="x",ylab="y",main="Random Walk",col=1:10,xlim=range(walk[1,]),ylim=range(walk[2,]))
segments(head(walk[1,], -1)
, head(walk[2,], -1)
, tail(walk[1,], -1)
, tail(walk[2,], -1)
, col = rainbow(ncol(walk) -1)  # a range of colors
)
text(walk[1,1:rw$steps],walk[2,1:rw$steps],(1:rw$steps), cex=0.55)
end<-cbind(rw$final[1],rw$final[2])
start<-rw$start
points(start,pch=16,col="green", cex = 3)
points(end,pch=16,col="red", cex = 3)
}
?points
plot(rww)
rw = function(steps,returnType="full",start=c(0,0)) {
#checks
if(!is.numeric(steps)) stop("The Number of steps must be numeric")
if(!is.double(start)) stop("start must be a vector with two integers")
if(!isTRUE(length(start)==2)) stop("start must be a vector with two integers")
if(!is.character(returnType)) stop("returnType must be either \"full\" or \"final\"")
if(!isTRUE(start[2] == floor(start[2])) & !isTRUE(start[2] == floor(start[2])))
stop("start must be a vector with two integer values")
if(!isTRUE(steps == floor(steps) & steps>=1)) stop("steps must be a positive integer")
if(!isTRUE(returnType=="full" | returnType=="final")) stop("returnType must be either \"full\" or \"final\"")
walk<-matrix(start,2,steps-1)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
realWalk<-matrix(c(c(start[1],cumsum(walk[1,])),c(start[2],cumsum(walk[2,]))),2,steps,byrow = TRUE)
value<-list(steps=steps, walk=realWalk, start=start,final=realWalk[,steps])
class(value)<-"rw"
value
}
# name the class appropriately
class(rw) <- "randomWalk"
print.rw <- function(rw) {
cat("Random Walk of ", rw$steps, " number of steps\n")
cat("Start position ", rw$start, "\n")
cat("Final position ", rw$final, "\n")
}
`[.rw` <- function (rw,i)  {
if(!is.numeric(i)) stop("i must be a positive integer")
if(!isTRUE(i == floor(i) & i>=1 & i<=rw$steps)) stop("i must be a positive integer between 1 and rw steps")
y<-rw$walk[,i]
return (y)
}
`start<-` <- function(x, ...) UseMethod("start<-")
`start<-.rw` <- function(rw,value){
old <- rw$start
rw$start <- value
rw$walk <- rw$walk + rw$start - old
rw$final <- rw$final + rw$start - old
return(rw)
}
plot.rw <- function(rw) {
walk<-rw$walk
plot(0,type="n",xlab="x",ylab="y",main="Random Walk",col=1:10,xlim=range(walk[1,]),ylim=range(walk[2,]))
segments(head(walk[1,], -1)
, head(walk[2,], -1)
, tail(walk[1,], -1)
, tail(walk[2,], -1)
, col = rainbow(ncol(walk) -1)  # a range of colors
)
text(walk[1,1:rw$steps],walk[2,1:rw$steps],(1:rw$steps), cex=0.55)
points(walk[1,1],walk[1,2],pch=12,col="green", cex = 2) #beginning
points(walk[1,rw$steps],walk[2,rw$steps],pch=12,col="red", cex = 2) #end
}
plot(rww)
rww
rw = function(steps,returnType="full",start=c(0,0)) {
#checks
if(!is.numeric(steps)) stop("The Number of steps must be numeric")
if(!is.double(start)) stop("start must be a vector with two integers")
if(!isTRUE(length(start)==2)) stop("start must be a vector with two integers")
if(!is.character(returnType)) stop("returnType must be either \"full\" or \"final\"")
if(!isTRUE(start[2] == floor(start[2])) & !isTRUE(start[2] == floor(start[2])))
stop("start must be a vector with two integer values")
if(!isTRUE(steps == floor(steps) & steps>=1)) stop("steps must be a positive integer")
if(!isTRUE(returnType=="full" | returnType=="final")) stop("returnType must be either \"full\" or \"final\"")
walk<-matrix(start,2,steps-1)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
realWalk<-matrix(c(c(start[1],cumsum(walk[1,])),c(start[2],cumsum(walk[2,]))),2,steps,byrow = TRUE)
value<-list(steps=steps, walk=realWalk, start=start,final=realWalk[,steps])
class(value)<-"rw"
value
}
# name the class appropriately
class(rw) <- "randomWalk"
print.rw <- function(rw) {
cat("Random Walk of ", rw$steps, " number of steps\n")
cat("Start position ", rw$start, "\n")
cat("Final position ", rw$final, "\n")
}
`[.rw` <- function (rw,i)  {
if(!is.numeric(i)) stop("i must be a positive integer")
if(!isTRUE(i == floor(i) & i>=1 & i<=rw$steps)) stop("i must be a positive integer between 1 and rw steps")
y<-rw$walk[,i]
return (y)
}
`start<-` <- function(x, ...) UseMethod("start<-")
`start<-.rw` <- function(rw,value){
old <- rw$start
rw$start <- value
rw$walk <- rw$walk + rw$start - old
rw$final <- rw$final + rw$start - old
return(rw)
}
plot.rw <- function(rw) {
walk<-rw$walk
plot(0,type="n",xlab="x",ylab="y",main="Random Walk",col=1:10,xlim=range(walk[1,]),ylim=range(walk[2,]))
segments(head(walk[1,], -1)
, head(walk[2,], -1)
, tail(walk[1,], -1)
, tail(walk[2,], -1)
, col = rainbow(ncol(walk) -1)  # a range of colors
)
text(walk[1,1:rw$steps],walk[2,1:rw$steps],(1:rw$steps), cex=0.55)
points(walk[1,1],walk[2,1],pch=12,col="green", cex = 2) #beginning
points(walk[1,rw$steps],walk[2,rw$steps],pch=12,col="red", cex = 2) #end
}
plot(rww)
?points
rw = function(steps,returnType="full",start=c(0,0)) {
#checks
if(!is.numeric(steps)) stop("The Number of steps must be numeric")
if(!is.double(start)) stop("start must be a vector with two integers")
if(!isTRUE(length(start)==2)) stop("start must be a vector with two integers")
if(!is.character(returnType)) stop("returnType must be either \"full\" or \"final\"")
if(!isTRUE(start[2] == floor(start[2])) & !isTRUE(start[2] == floor(start[2])))
stop("start must be a vector with two integer values")
if(!isTRUE(steps == floor(steps) & steps>=1)) stop("steps must be a positive integer")
if(!isTRUE(returnType=="full" | returnType=="final")) stop("returnType must be either \"full\" or \"final\"")
walk<-matrix(start,2,steps-1)
prob<-runif(steps-1)
walk[,which(prob<=0.25)]=walk[,which(prob<=0.25)]+c(1,0)
walk[,which(0.25<prob & prob<=0.5)]=walk[,which(0.25<prob & prob<=0.5)]+c(-1,0)
walk[,which(0.5<prob & prob<=0.75)]=walk[,which(0.5<prob & prob<=0.75)]+c(0,1)
walk[,which(0.75<prob & prob<=1)]=  walk[,which(0.75<prob & prob<=1)]+c(0,-1)
realWalk<-matrix(c(c(start[1],cumsum(walk[1,])),c(start[2],cumsum(walk[2,]))),2,steps,byrow = TRUE)
value<-list(steps=steps, walk=realWalk, start=start,final=realWalk[,steps])
class(value)<-"rw"
value
}
# name the class appropriately
class(rw) <- "randomWalk"
print.rw <- function(rw) {
cat("Random Walk of ", rw$steps, " number of steps\n")
cat("Start position ", rw$start, "\n")
cat("Final position ", rw$final, "\n")
}
`[.rw` <- function (rw,i)  {
if(!is.numeric(i)) stop("i must be a positive integer")
if(!isTRUE(i == floor(i) & i>=1 & i<=rw$steps)) stop("i must be a positive integer between 1 and rw steps")
y<-rw$walk[,i]
return (y)
}
`start<-` <- function(x, ...) UseMethod("start<-")
`start<-.rw` <- function(rw,value){
old <- rw$start
rw$start <- value
rw$walk <- rw$walk + rw$start - old
rw$final <- rw$final + rw$start - old
return(rw)
}
plot.rw <- function(rw) {
walk<-rw$walk
plot(0,type="n",xlab="x",ylab="y",main="Random Walk",col=1:10,xlim=range(walk[1,]),ylim=range(walk[2,]))
segments(head(walk[1,], -1)
, head(walk[2,], -1)
, tail(walk[1,], -1)
, tail(walk[2,], -1)
, col = rainbow(ncol(walk) -1)  # a range of colors
)
text(walk[1,1:rw$steps],walk[2,1:rw$steps],(1:rw$steps), cex=0.55)
points(walk[1,1],walk[2,1],pch=1,col="green", cex = 2) #beginning
points(walk[1,rw$steps],walk[2,rw$steps],pch=11,col="red", cex = 2) #end
}
plot(rww)
require(ggplot2)
set.seed(0)
# also a good place to set global chunk options
library(knitr) # need this for opts_chunk command
opts_chunk$set(fig.width = 5, fig.height = 5)
# if we wanted chunks by default not to be evaluated
# opts_chunk$set(eval = FALSE)
tmp <- function() {
load('tmp.Rda') # load('tmp.Rda',envir=.GlobalEnv)  #envir = global
runif(1)
}
?get
install.packages(c("stringr", "curl", "XML", "RCurl", "gsubfn", "microbenchmark", "rbenchmark", "pryr"))
install.packages("ggplot2")
install.packages("gsubfn")
library(stringr)
library(curl)
library(methods)
library(XML)
library(RCurl)
library(gsubfn)
library(microbenchmark)
require(rbenchmark)
library(pryr)
install.packages("knitr")
<<setup, include=FALSE>>=
# include any code here you don't want to show up in the document,
# e.g., package and dataset loading
install.packages("sweave")
install.packages("Sweave")
log(c(1,2))
"x<-1"
a<-quote(x<-1)
a
eval(a)
vecInt<-rep(1:10,10^7)
vecFloat<-as.double(vecInt)
timing <- function(int,float) {
cat("Operations: \nint = ")
print(int)
cat("float = ")
print(float)
benchmark(int=eval(int),float=eval(float),replications = 5, columns=c('test','elapsed','user.self','sys.self','relative'))
}
timing( quote(as.integer(vecInt%/%vecInt)), quote(vecFloat/vecFloat))
library(microbenchmark)
require(rbenchmark)
timing( quote(as.integer(vecInt%/%vecInt)), quote(vecFloat/vecFloat))
vecInt%/%vecInt
timing( quote(as.integer(vecInt%/%vecInt)), quote(vecFloat/vecFloat))
typeof(vecInt%/%vecInt)
# e.g., package and dataset loading
require(ggplot2)
set.seed(0)
# also a good place to set global chunk options
a<-2
rm(a)
source('~/.active-rstudio-document')
n=5000
X<-matrix(runif(n*n),n,n) #test matrix
dim(X)
X<-X%*%t(X) #pos def matrix
y<-runif(n)
solve(X)
d_log <- function(x) log(d(x))
d<-dexp
optim(d_log)
?optim
optim(1000,d_log)
optim(10,d_log)
optim(10,d_log,method="Brent")
optim(10,d_lo)
optim(10,d_log)
plot(d_log(seq(-10,10,0.1)))
seq(-10,10)
?optim
plot(d_log(seq(-10,10,0.1)),control=list(fn=-1))
plot(d_log(seq(-10,10,0.1)))
optim(10,d_log,control=list(fn=-1))
optim(10,d_log,method="Brent",control = list(fn=-1))
optim(10,d_log,method="Brent",control = list(fnscale=-1))
?optim
optim(10,d_log,method="Brent",lower=-10^16,upper=10^16,control = list(fnscale=-1))
optim(10,d_log,method="Brent",lower=-1000,upper=1000,control = list(fnscale=-1))
plot(seq(-100,100,0.1),d_log(seq(-100,100,0.1)))
?grad
library(numDeriv)
?grad
grad(d_log)
grad(d_log,seq(-100,100,0.1))
?optimize
optimize(d_log,lower=-10^309,upper=10^308,maximum=TRUE,tol=Machine$double.eps)
optimize(d_log,lower=-10^309,upper=10^308,maximum=TRUE,tol=.Machine$double.eps)
optimize(d_log,lower=-10^308,upper=10^308,maximum=TRUE,tol=.Machine$double.eps)
warnings()
optimize(d_log,lower=-10^300,upper=10^300,maximum=TRUE,tol=.Machine$double.eps)
dexp(-10)
optimize(d_log,lower=-10^300,upper=10^300,maximum=TRUE,tol=.Machine$double.eps)
optimize(d_log,lower=-10,upper=10,maximum=TRUE,tol=.Machine$double.eps)
optimize(d_log,lower=-10^20,upper=10^20,maximum=TRUE,tol=.Machine$double.eps)
optimize(dexp,lower=-10^300,upper=10^300,maximum=TRUE,tol=.Machine$double.eps)
plot(seq(-100,100),dexp(seq(-100,100)))
plot(seq(-10,10),dexp(seq(-10,10)))
optimize(dexp,lower=-10^300,upper=10^300,maximum=TRUE,tol=.Machine$double.eps)
optimize(dexp,lower=-10^30,upper=10^30,maximum=TRUE,tol=.Machine$double.eps)
optimize(dexp,lower=-10^3,upper=10^3,maximum=TRUE,tol=.Machine$double.eps)
optimize(dexp,lower=-10^4,upper=10^4,maximum=TRUE,tol=.Machine$double.eps)
uniroot(dexp)
uniroot(dexp,lower=10^30,upper=10^30)
uniroot(dexp,lower=-10^30,upper=10^30)
?dunif
setwd("~/git/ars")
library(testthat)
install.packages("~/git/ars_2.0.tar.gz", type="source", repos = NULL)
library(ars)
?ars
?find_mode
devtools::document()
?find_mode
