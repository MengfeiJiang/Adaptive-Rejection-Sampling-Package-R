}
update(0)
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
#plot(x, h(x), xlim=c(-6,6), ylim=c(ymin,ymax+5),type='l',lty=1)
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len) points(func_list$x_hi[i], func_list$u[[i]](func_list$x_hi[i]), pch = 20)
}
}
}
update(0)
update(c(-1,2,0,3,3.2,0.43)
)
func_list$x_hi[len]
debug(update)
update(c(-2.56,0,0.43))
len
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
#plot(x, h(x), xlim=c(-6,6), ylim=c(ymin,ymax+5),type='l',lty=1)
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len-1) points(func_list$x_hi[i], func_list$u[[i]](func_list$x_hi[i]), pch = 20)
}
}
}
undebug(update)
update(c(-2.56,0,0.43))
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
#plot(x, h(x), xlim=c(-6,6), ylim=c(ymin,ymax+5),type='l',lty=1)
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len-1) points(func_list$x_hi[i], func_list$u[[i]](func_list$x_hi[i]), pch = 17)
}
}
}
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
#plot(x, h(x), xlim=c(-6,6), ylim=c(ymin,ymax+5),type='l',lty=1)
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len-1) points(func_list$x_hi[i], func_list$l[[i]](func_list$x_hi[i]), pch = 17)
}
}
}
update(c(-2.56,0,0.43))
f <- dnorm(mean=3,sd=0.78)
f <- function(x) dnorm(x,mean=3,sd=0.78)
f(x)
plot(x,f(x))
h <- function(x) return(log(f(x)))
x <- seq(-5,5,by=0.1)
ymin <- min(h(x))
ymax <- max(h(x))
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
idx <- 1
# initialization
vertices <- init_vertices(h, -5, 5)
points(vertices[,1],vertices[,2], pch=20)
func_list <- init_piecewise(vertices, h, -6, 6)
len <- length(vertices[,1])
for(i in 1:len){
u <- func_list$u[[i]]
lines(x, u(x), lty=5)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
lines(x, l(x), lty=3)
}
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
#plot(x, h(x), xlim=c(-6,6), ylim=c(ymin,ymax+5),type='l',lty=1)
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len-1) points(func_list$x_hi[i], func_list$l[[i]](func_list$x_hi[i]), pch = 17)
}
}
}
update(c(-5,-4,-3.2,0,0.5,1.11,2))
vertices
f <- dnorm
h <- function(x) return(log(f(x)))
x <- seq(-5,5,by=0.1)
ymin <- min(h(x))
ymax <- max(h(x))
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
idx <- 1
# initialization
vertices <- init_vertices(h, -5, 5)
points(vertices[,1],vertices[,2], pch=20)
func_list <- init_piecewise(vertices, h, -6, 6)
len <- length(vertices[,1])
for(i in 1:len){
u <- func_list$u[[i]]
lines(x, u(x), lty=5)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
lines(x, l(x), lty=3)
}
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
#plot(x, h(x), xlim=c(-6,6), ylim=c(ymin,ymax+5),type='l',lty=1)
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len-1) points(func_list$x_hi[i], func_list$l[[i]](func_list$x_hi[i]), pch = 17)
}
}
}
update(c(-5,-4,-3.2,0,0.5,1.11,2))
debug(update)
update(c(-5,-4,-3.2,0,0.5,1.11,2))
update(c(-5,-4,-3.2,0,0.5,1.11,2))
update(c(-4.99,-4,-3.2,0,0.5,1.11,2))
f
f <- function(x) dnorm(x, mean=3.5, sd=0.87)
f
h <- function(x) return(log(f(x)))
x <- seq(-5,5,by=0.1)
ymin <- min(h(x))
ymax <- max(h(x))
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
idx <- 1
# initialization
vertices <- init_vertices(h, -5, 5)
points(vertices[,1],vertices[,2], pch=20)
func_list <- init_piecewise(vertices, h, -6, 6)
len <- length(vertices[,1])
for(i in 1:len){
u <- func_list$u[[i]]
lines(x, u(x), lty=5)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
lines(x, l(x), lty=3)
}
update(c(-4.99,-4,-3.2,0,0.5,1.11,2))
q
undebug(update)
update(c(-4.99,-4,-3.2,0,0.5,1.11,2))
update_matrices <- function(vertices, func_list, new_vertex, h){
# update the vertices
new_row <- c(new_vertex, NA, NA, NA)
vertices <- rbind(vertices,new_row)
rownames(vertices) <- NULL
vertices <- vertices[order(vertices[,1]),]
idx <- which(vertices[,1]==new_vertex)
vertices[idx,2] <- h(new_vertex)
vertices[idx,3] <- evaluate_deriv(h,new_vertex)
# find new secant value
vertices[idx-1,4] <- calc_secant(vertices,idx-1,idx)
vertices[idx,4] <- calc_secant(vertices,idx,idx+1)
# update the df
len <- length(vertices[,1])
u_new <- create_u(vertices, idx, h)
exp_u_new <- exp_fun(u_new)
func_list$u[idx:len] <- c(u_new, func_list$u[idx:(len-1)])
func_list$exp_u[idx:len] <- c(u_new, func_list$exp_u[idx:(len-1)])
z_new_left <- calc_intersection(h, vertices, idx-1, idx)
z_new_right <- calc_intersection(h, vertices, idx, idx+1)
z_lo_replace <- c(z_new_left, z_new_right, func_list$z_lo[(idx+1):(len-1)])
truncate_idx <- which(is.na(z_lo_replace))
z_lo_replace <- z_lo_replace[1:truncate_idx-1]
func_list$z_lo[idx:len] <- z_lo_replace
func_list$z_hi[(idx-1):len] <- c(z_new_left, z_new_right, func_list$z_hi[idx:(len-1)])
l_new_left <- create_l(vertices, idx-1)
l_new_right <- create_l(vertices, idx)
l_replace <- c(l_new_left, l_new_right)
if(idx+1 < len) l_replace <- c(l_replace, func_list$l[(idx):(len-1)]) # if the new point is at the last
func_list$l[(idx-1):len] <- l_replace
x_lo_replace <- c(new_vertex, func_list$x_lo[idx:(len-1)])
x_hi_replace <- c(new_vertex, func_list$x_hi[(idx-1):(len-1)])
func_list$x_lo[idx:len] <- x_lo_replace
func_list$x_hi[(idx-1):len] <- x_hi_replace
return(list(new_vertices=vertices, new_df=func_list, new_index=idx))
}
# update the vertices
update_vertices <- function(vertices, new_vertex, h){
new_row <- c(new_vertex, NA, NA, NA)
vertices <- rbind(vertices,new_row)
rownames(vertices) <- NULL
# order the vertices matrix by the x-value
vertices <- vertices[order(vertices[,1]),]
idx<<-which(vertices[,1]==new_vertex) # global assignment
vertices[idx,2]=h(new_vertex)
vertices[idx,3]=evaluate_deriv(h,new_vertex)
# update secant values
vertices[idx-1,4]=calc_secant(vertices,idx-1,idx)
vertices[idx,4]=calc_secant(vertices,idx,idx+1)
return(vertices)
}
# update the func_list
update_func_list <- function(vertices, func_list, h, idx){
# get the lengths of new list
len_new <- length(vertices[,1])
len_old <- len_new - 1
# update the u functions
u_new <- create_u(vertices, idx, h)
exp_u_new <- exp_fun(u_new)
func_list$u[idx:len_new] <- c(u_new, func_list$u[idx:len_old])
func_list$exp_u[idx:len_new] <- c(exp_u_new, func_list$exp_u[idx:len_old])
# update the endpoints/z's of the u functions
# assuming the new vertex is always between the two starting points
# that is, idx cannot be 1, or len_old+1
z_new_left <- calc_intersection(h, vertices, idx-1, idx)
z_new_right <- calc_intersection(h, vertices, idx, idx+1)
z_new <- c(z_new_left, z_new_right)
if(idx == len_old) func_list$z_lo[idx:len_new] <- z_new
else func_list$z_lo[idx:len_new] <- c(z_new, func_list$z_lo[(idx+1):len_old])
func_list$z_hi[(idx-1):len_new] <- c(z_new, func_list$z_hi[idx:len_old])
# update the l functions
l_new_left <- create_l(vertices, idx-1)
l_new_right <- create_l(vertices, idx)
l_replace <- c(l_new_left, l_new_right, func_list$l[idx:len_old])
func_list$l[(idx-1):len_new] <- l_replace
# update the end-points/x's of the l functions
func_list$x_lo[idx:len_new] <- c(vertices[idx,1], func_list$x_lo[idx:len_old])
func_list$x_hi[(idx-1):len_new] <- c(vertices[idx,1], func_list$x_hi[(idx-1):len_old])
return(func_list)
}
f <- dnorm
h <- function(x) return(log(f(x)))
x <- seq(-5,5,by=0.1)
ymin <- min(h(x))
ymax <- max(h(x))
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
idx <- 1
# initialization
vertices <- init_vertices(h, -5, 5)
points(vertices[,1],vertices[,2], pch=20)
func_list <- init_piecewise(vertices, h, -6, 6)
len <- length(vertices[,1])
for(i in 1:len){
u <- func_list$u[[i]]
lines(x, u(x), lty=5)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
lines(x, l(x), lty=3)
}
plot(x, h(x), xlim=c(-5,5), ylim=c(ymin,ymax+5),type='l',lty=1)
# initialization
vertices <- init_vertices(h, -5, 5)
points(vertices[,1],vertices[,2], pch=20)
func_list <- init_piecewise(vertices, h, -6, 6)
len <- length(vertices[,1])
for(i in 1:len){
u <- func_list$u[[i]]
lines(x, u(x), lty=5)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
lines(x, l(x), lty=3)
}
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
#plot(x, h(x), xlim=c(-6,6), ylim=c(ymin,ymax+5),type='l',lty=1)
plot(x, h(x), xlim=c(-10,10), ylim=c(ymin-10,ymax+5),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len-1) points(func_list$x_hi[i], func_list$l[[i]](func_list$x_hi[i]), pch = 17)
}
}
}
update(0)
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
plot(x, h(x), xlim=c(-5,5), ylim=c(ymin,ymax+5),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len-1) points(func_list$x_hi[i], func_list$l[[i]](func_list$x_hi[i]), pch = 17)
}
}
}
update(0)
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
plot(x, h(x), xlim=c(-5,5), ylim=c(ymin,ymax+3),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len-1) points(func_list$x_hi[i], func_list$l[[i]](func_list$x_hi[i]), pch = 17)
}
}
}
update(0)
update(c(-4.8,-3,-2.5,-2,1,-0.43,0.32,0,2.35)
)
update(c(seq(-4.5,4.5,by=0.5)))
update(c(seq(-4.5,4.5,by=1)))
update(c(seq(-4.5,4.5,by=1.5)))
update(c(-4.8,-3,-2.5,-2,1,-0.43,0.32,0,2.35))
# update the vertices with new h, h', and secant value
update_vertices <- function(vertices, new_vertex, h){
new_row <- c(new_vertex, NA, NA, NA)
vertices <- rbind(vertices,new_row)
rownames(vertices) <- NULL
# order the vertices matrix by the x-value
vertices <- vertices[order(vertices[,1]),]
idx<<-which(vertices[,1]==new_vertex) # global assignment
vertices[idx,2]=h(new_vertex)
vertices[idx,3]=evaluate_deriv(h,new_vertex)
# update secant values
vertices[idx-1,4]=calc_secant(vertices,idx-1,idx)
vertices[idx,4]=calc_secant(vertices,idx,idx+1)
return(vertices)
}
# update the func_list with u, l, the exponential of u & l, as well as the end points of the u's & l's
update_func_list <- function(vertices, func_list, h, idx){
# get the lengths of new list
len_new <- length(vertices[,1])
len_old <- len_new - 1
# update the u functions
u_new <- create_u(vertices, idx, h)
exp_u_new <- exp_fun(u_new)
func_list$u[idx:len_new] <- c(u_new, func_list$u[idx:len_old])
func_list$exp_u[idx:len_new] <- c(exp_u_new, func_list$exp_u[idx:len_old])
# update the endpoints/z's of the u functions
# assuming the new vertex is always between the two starting points
# that is, idx cannot be 1, or len_old+1
z_new_left <- calc_intersection(h, vertices, idx-1, idx)
z_new_right <- calc_intersection(h, vertices, idx, idx+1)
z_new <- c(z_new_left, z_new_right)
if(idx == len_old) func_list$z_lo[idx:len_new] <- z_new
else func_list$z_lo[idx:len_new] <- c(z_new, func_list$z_lo[(idx+1):len_old])
func_list$z_hi[(idx-1):len_new] <- c(z_new, func_list$z_hi[idx:len_old])
# update the l functions
l_new_left <- create_l(vertices, idx-1)
l_new_right <- create_l(vertices, idx)
exp_l_new_left <- exp_fun(l_new_left)
exp_l_new_right <- exp_fun(l_new_right)
func_list$l[(idx-1):len_new] <- c(l_new_left, l_new_right, func_list$l[idx:len_old])
func_list$exp_l[(idx-1):len_new] <- c(exp_l_new_left, exp_l_new_right, func_list$exp_l[idx:len_old])
# update the end-points/x's of the l functions
func_list$x_lo[idx:len_new] <- c(vertices[idx,1], func_list$x_lo[idx:len_old])
func_list$x_hi[(idx-1):len_new] <- c(vertices[idx,1], func_list$x_hi[(idx-1):len_old])
return(func_list)
}
update <- function(dat){
for(pt in dat){
# manually update
new_vertex <- pt
vertices <- update_vertices(vertices,new_vertex, h)
func_list <- update_func_list(vertices, func_list, h, idx)
len <- length(vertices[,1])
plot(x, h(x), xlim=c(-5,5), ylim=c(ymin,ymax+3),type='l',lty=1)
for(i in 1:len){
u <- func_list$u[[i]]
dat <- c(func_list$z_lo[i], func_list$z_hi[i])
lines(dat, u(dat), lty=5)
points(func_list$z_lo[i], func_list$u[[i]](func_list$z_lo[i]), pch = 20)
if(i==len) points(func_list$z_hi[i], func_list$u[[i]](func_list$z_hi[i]), pch = 20)
}
for(i in 1:(len-1)){
l <- func_list$l[[i]]
dat <- c(func_list$x_lo[i], func_list$x_hi[i])
lines(dat, l(dat), lty=3)
points(func_list$x_lo[i], func_list$l[[i]](func_list$x_lo[i]), pch = 17)
if(i==len-1) points(func_list$x_hi[i], func_list$l[[i]](func_list$x_hi[i]), pch = 17)
}
}
}
update(c(-4.8,-3,-2.5,-2,1,-0.43,0.32,0,2.35))
update(c(seq(-4.5,4.5,by=1)))
func_list
debug(update)
update(c(seq(-4.5,4.5,by=1)))
pt
vertices
func_list
